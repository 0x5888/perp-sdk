/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Funding {
  export type GrowthStruct = {
    twPremiumX96: BigNumberish;
    twPremiumDivBySqrtPriceX96: BigNumberish;
  };

  export type GrowthStructOutput = [BigNumber, BigNumber] & {
    twPremiumX96: BigNumber;
    twPremiumDivBySqrtPriceX96: BigNumber;
  };
}

export declare namespace IOrderBook {
  export type AddLiquidityParamsStruct = {
    trader: string;
    baseToken: string;
    base: BigNumberish;
    quote: BigNumberish;
    lowerTick: BigNumberish;
    upperTick: BigNumberish;
    fundingGrowthGlobal: Funding.GrowthStruct;
  };

  export type AddLiquidityParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    Funding.GrowthStructOutput
  ] & {
    trader: string;
    baseToken: string;
    base: BigNumber;
    quote: BigNumber;
    lowerTick: number;
    upperTick: number;
    fundingGrowthGlobal: Funding.GrowthStructOutput;
  };

  export type AddLiquidityResponseStruct = {
    base: BigNumberish;
    quote: BigNumberish;
    fee: BigNumberish;
    liquidity: BigNumberish;
  };

  export type AddLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    base: BigNumber;
    quote: BigNumber;
    fee: BigNumber;
    liquidity: BigNumber;
  };

  export type RemoveLiquidityParamsStruct = {
    maker: string;
    baseToken: string;
    lowerTick: BigNumberish;
    upperTick: BigNumberish;
    liquidity: BigNumberish;
  };

  export type RemoveLiquidityParamsStructOutput = [
    string,
    string,
    number,
    number,
    BigNumber
  ] & {
    maker: string;
    baseToken: string;
    lowerTick: number;
    upperTick: number;
    liquidity: BigNumber;
  };

  export type RemoveLiquidityResponseStruct = {
    base: BigNumberish;
    quote: BigNumberish;
    fee: BigNumberish;
    takerBase: BigNumberish;
    takerQuote: BigNumberish;
  };

  export type RemoveLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    base: BigNumber;
    quote: BigNumber;
    fee: BigNumber;
    takerBase: BigNumber;
    takerQuote: BigNumber;
  };

  export type ReplaySwapParamsStruct = {
    baseToken: string;
    isBaseToQuote: boolean;
    shouldUpdateState: boolean;
    amount: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
    exchangeFeeRatio: BigNumberish;
    uniswapFeeRatio: BigNumberish;
    globalFundingGrowth: Funding.GrowthStruct;
  };

  export type ReplaySwapParamsStructOutput = [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    number,
    number,
    Funding.GrowthStructOutput
  ] & {
    baseToken: string;
    isBaseToQuote: boolean;
    shouldUpdateState: boolean;
    amount: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    exchangeFeeRatio: number;
    uniswapFeeRatio: number;
    globalFundingGrowth: Funding.GrowthStructOutput;
  };

  export type ReplaySwapResponseStruct = {
    tick: BigNumberish;
    fee: BigNumberish;
    insuranceFundFee: BigNumberish;
  };

  export type ReplaySwapResponseStructOutput = [
    number,
    BigNumber,
    BigNumber
  ] & { tick: number; fee: BigNumber; insuranceFundFee: BigNumber };
}

export declare namespace OpenOrder {
  export type InfoStruct = {
    liquidity: BigNumberish;
    lowerTick: BigNumberish;
    upperTick: BigNumberish;
    lastFeeGrowthInsideX128: BigNumberish;
    lastTwPremiumGrowthInsideX96: BigNumberish;
    lastTwPremiumGrowthBelowX96: BigNumberish;
    lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumberish;
    baseDebt: BigNumberish;
    quoteDebt: BigNumberish;
  };

  export type InfoStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    liquidity: BigNumber;
    lowerTick: number;
    upperTick: number;
    lastFeeGrowthInsideX128: BigNumber;
    lastTwPremiumGrowthInsideX96: BigNumber;
    lastTwPremiumGrowthBelowX96: BigNumber;
    lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
    baseDebt: BigNumber;
    quoteDebt: BigNumber;
  };
}

export interface IOrderBookInterface extends utils.Interface {
  contractName: "IOrderBook";
  functions: {
    "addLiquidity((address,address,uint256,uint256,int24,int24,(int256,int256)))": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getLiquidityCoefficientInFundingPayment(address,address,(int256,int256))": FunctionFragment;
    "getOpenOrder(address,address,int24,int24)": FunctionFragment;
    "getOpenOrderById(bytes32)": FunctionFragment;
    "getOpenOrderIds(address,address)": FunctionFragment;
    "getPendingFee(address,address,int24,int24)": FunctionFragment;
    "getTotalOrderDebt(address,address,bool)": FunctionFragment;
    "getTotalQuoteBalanceAndPendingFee(address,address[])": FunctionFragment;
    "getTotalTokenAmountInPoolAndPendingFee(address,address,bool)": FunctionFragment;
    "hasOrder(address,address[])": FunctionFragment;
    "removeLiquidity((address,address,int24,int24,uint128))": FunctionFragment;
    "replaySwap((address,bool,bool,int256,uint160,uint24,uint24,(int256,int256)))": FunctionFragment;
    "updateFundingGrowthAndLiquidityCoefficientInFundingPayment(address,address,(int256,int256))": FunctionFragment;
    "updateOrderDebt(bytes32,int256,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [IOrderBook.AddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityCoefficientInFundingPayment",
    values: [string, string, Funding.GrowthStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrderById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrderIds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFee",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOrderDebt",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalQuoteBalanceAndPendingFee",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenAmountInPoolAndPendingFee",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOrder",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [IOrderBook.RemoveLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "replaySwap",
    values: [IOrderBook.ReplaySwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingGrowthAndLiquidityCoefficientInFundingPayment",
    values: [string, string, Funding.GrowthStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderDebt",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityCoefficientInFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrderById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOrderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalQuoteBalanceAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenAmountInPoolAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "replaySwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingGrowthAndLiquidityCoefficientInFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderDebt",
    data: BytesLike
  ): Result;

  events: {
    "ExchangeChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeChanged"): EventFragment;
}

export type ExchangeChangedEvent = TypedEvent<[string], { exchange: string }>;

export type ExchangeChangedEventFilter = TypedEventFilter<ExchangeChangedEvent>;

export interface IOrderBook extends BaseContract {
  contractName: "IOrderBook";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      params: IOrderBook.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber] & { liquidityCoefficientInFundingPayment: BigNumber }
    >;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OpenOrder.InfoStructOutput]>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[OpenOrder.InfoStructOutput]>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalQuoteAmountInPools: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeLiquidity(
      params: IOrderBook.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaySwap(
      params: IOrderBook.ReplaySwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    params: IOrderBook.AddLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getLiquidityCoefficientInFundingPayment(
    trader: string,
    baseToken: string,
    fundingGrowthGlobal: Funding.GrowthStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenOrder(
    trader: string,
    baseToken: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OpenOrder.InfoStructOutput>;

  getOpenOrderById(
    orderId: BytesLike,
    overrides?: CallOverrides
  ): Promise<OpenOrder.InfoStructOutput>;

  getOpenOrderIds(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPendingFee(
    trader: string,
    baseToken: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOrderDebt(
    trader: string,
    baseToken: string,
    fetchBase: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalQuoteBalanceAndPendingFee(
    trader: string,
    baseTokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalQuoteAmountInPools: BigNumber;
      totalPendingFee: BigNumber;
    }
  >;

  getTotalTokenAmountInPoolAndPendingFee(
    trader: string,
    baseToken: string,
    fetchBase: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmount: BigNumber;
      totalPendingFee: BigNumber;
    }
  >;

  hasOrder(
    trader: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeLiquidity(
    params: IOrderBook.RemoveLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaySwap(
    params: IOrderBook.ReplaySwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
    trader: string,
    baseToken: string,
    fundingGrowthGlobal: Funding.GrowthStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrderDebt(
    orderId: BytesLike,
    base: BigNumberish,
    quote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      params: IOrderBook.AddLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IOrderBook.AddLiquidityResponseStructOutput>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OpenOrder.InfoStructOutput>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<OpenOrder.InfoStructOutput>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalQuoteAmountInPools: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeLiquidity(
      params: IOrderBook.RemoveLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IOrderBook.RemoveLiquidityResponseStructOutput>;

    replaySwap(
      params: IOrderBook.ReplaySwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<IOrderBook.ReplaySwapResponseStructOutput>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeChanged(address)"(
      exchange?: string | null
    ): ExchangeChangedEventFilter;
    ExchangeChanged(exchange?: string | null): ExchangeChangedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      params: IOrderBook.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      params: IOrderBook.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaySwap(
      params: IOrderBook.ReplaySwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: IOrderBook.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: IOrderBook.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaySwap(
      params: IOrderBook.ReplaySwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: Funding.GrowthStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
