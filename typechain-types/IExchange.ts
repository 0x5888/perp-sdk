/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IExchange {
  export type RealizePnlParamsStruct = {
    trader: string;
    baseToken: string;
    base: BigNumberish;
    quote: BigNumberish;
  };

  export type RealizePnlParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & { trader: string; baseToken: string; base: BigNumber; quote: BigNumber };

  export type SwapParamsStruct = {
    trader: string;
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    isClose: boolean;
    amount: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [
    string,
    string,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    isClose: boolean;
    amount: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };

  export type SwapResponseStruct = {
    base: BigNumberish;
    quote: BigNumberish;
    exchangedPositionSize: BigNumberish;
    exchangedPositionNotional: BigNumberish;
    fee: BigNumberish;
    insuranceFundFee: BigNumberish;
    pnlToBeRealized: BigNumberish;
    sqrtPriceAfterX96: BigNumberish;
    tick: BigNumberish;
    isPartialClose: boolean;
  };

  export type SwapResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean
  ] & {
    base: BigNumber;
    quote: BigNumber;
    exchangedPositionSize: BigNumber;
    exchangedPositionNotional: BigNumber;
    fee: BigNumber;
    insuranceFundFee: BigNumber;
    pnlToBeRealized: BigNumber;
    sqrtPriceAfterX96: BigNumber;
    tick: number;
    isPartialClose: boolean;
  };
}

export interface IExchangeInterface extends utils.Interface {
  contractName: "IExchange";
  functions: {
    "getAccountBalance()": FunctionFragment;
    "getAllPendingFundingPayment(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getMaxTickCrossedWithinBlock(address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPendingFundingPayment(address,address)": FunctionFragment;
    "getPnlToBeRealized((address,address,int256,int256))": FunctionFragment;
    "getSqrtMarkTwapX96(address,uint32)": FunctionFragment;
    "swap((address,address,bool,bool,bool,uint256,uint160))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPendingFundingPayment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTickCrossedWithinBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFundingPayment",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlToBeRealized",
    values: [IExchange.RealizePnlParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSqrtMarkTwapX96",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [IExchange.SwapParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTickCrossedWithinBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlToBeRealized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSqrtMarkTwapX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "AccountBalanceChanged(address)": EventFragment;
    "FundingUpdated(address,uint256,uint256)": EventFragment;
    "MaxTickCrossedWithinBlockChanged(address,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxTickCrossedWithinBlockChanged"
  ): EventFragment;
}

export type AccountBalanceChangedEvent = TypedEvent<
  [string],
  { accountBalance: string }
>;

export type AccountBalanceChangedEventFilter =
  TypedEventFilter<AccountBalanceChangedEvent>;

export type FundingUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { baseToken: string; markTwap: BigNumber; indexTwap: BigNumber }
>;

export type FundingUpdatedEventFilter = TypedEventFilter<FundingUpdatedEvent>;

export type MaxTickCrossedWithinBlockChangedEvent = TypedEvent<
  [string, number],
  { baseToken: string; maxTickCrossedWithinBlock: number }
>;

export type MaxTickCrossedWithinBlockChangedEventFilter =
  TypedEventFilter<MaxTickCrossedWithinBlockChangedEvent>;

export interface IExchange extends BaseContract {
  contractName: "IExchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPnlToBeRealized(
      params: IExchange.RealizePnlParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swap(
      params: IExchange.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAllPendingFundingPayment(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getMaxTickCrossedWithinBlock(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPendingFundingPayment(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPnlToBeRealized(
    params: IExchange.RealizePnlParamsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSqrtMarkTwapX96(
    baseToken: string,
    twapInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    params: IExchange.SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToBeRealized(
      params: IExchange.RealizePnlParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      params: IExchange.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<IExchange.SwapResponseStructOutput>;
  };

  filters: {
    "AccountBalanceChanged(address)"(
      accountBalance?: null
    ): AccountBalanceChangedEventFilter;
    AccountBalanceChanged(
      accountBalance?: null
    ): AccountBalanceChangedEventFilter;

    "FundingUpdated(address,uint256,uint256)"(
      baseToken?: string | null,
      markTwap?: null,
      indexTwap?: null
    ): FundingUpdatedEventFilter;
    FundingUpdated(
      baseToken?: string | null,
      markTwap?: null,
      indexTwap?: null
    ): FundingUpdatedEventFilter;

    "MaxTickCrossedWithinBlockChanged(address,uint24)"(
      baseToken?: string | null,
      maxTickCrossedWithinBlock?: null
    ): MaxTickCrossedWithinBlockChangedEventFilter;
    MaxTickCrossedWithinBlockChanged(
      baseToken?: string | null,
      maxTickCrossedWithinBlock?: null
    ): MaxTickCrossedWithinBlockChangedEventFilter;
  };

  estimateGas: {
    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToBeRealized(
      params: IExchange.RealizePnlParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      params: IExchange.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnlToBeRealized(
      params: IExchange.RealizePnlParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      params: IExchange.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
