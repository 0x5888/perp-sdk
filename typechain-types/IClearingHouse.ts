/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IClearingHouse {
  export type AddLiquidityParamsStruct = {
    baseToken: string;
    base: BigNumberish;
    quote: BigNumberish;
    lowerTick: BigNumberish;
    upperTick: BigNumberish;
    minBase: BigNumberish;
    minQuote: BigNumberish;
    useTakerBalance: boolean;
    deadline: BigNumberish;
  };

  export type AddLiquidityParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    baseToken: string;
    base: BigNumber;
    quote: BigNumber;
    lowerTick: number;
    upperTick: number;
    minBase: BigNumber;
    minQuote: BigNumber;
    useTakerBalance: boolean;
    deadline: BigNumber;
  };

  export type AddLiquidityResponseStruct = {
    base: BigNumberish;
    quote: BigNumberish;
    fee: BigNumberish;
    liquidity: BigNumberish;
  };

  export type AddLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    base: BigNumber;
    quote: BigNumber;
    fee: BigNumber;
    liquidity: BigNumber;
  };

  export type ClosePositionParamsStruct = {
    baseToken: string;
    sqrtPriceLimitX96: BigNumberish;
    oppositeAmountBound: BigNumberish;
    deadline: BigNumberish;
    referralCode: BytesLike;
  };

  export type ClosePositionParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    sqrtPriceLimitX96: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    referralCode: string;
  };

  export type OpenPositionParamsStruct = {
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    amount: BigNumberish;
    oppositeAmountBound: BigNumberish;
    deadline: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
    referralCode: BytesLike;
  };

  export type OpenPositionParamsStructOutput = [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    amount: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    referralCode: string;
  };

  export type RemoveLiquidityParamsStruct = {
    baseToken: string;
    lowerTick: BigNumberish;
    upperTick: BigNumberish;
    liquidity: BigNumberish;
    minBase: BigNumberish;
    minQuote: BigNumberish;
    deadline: BigNumberish;
  };

  export type RemoveLiquidityParamsStructOutput = [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseToken: string;
    lowerTick: number;
    upperTick: number;
    liquidity: BigNumber;
    minBase: BigNumber;
    minQuote: BigNumber;
    deadline: BigNumber;
  };

  export type RemoveLiquidityResponseStruct = {
    base: BigNumberish;
    quote: BigNumberish;
    fee: BigNumberish;
  };

  export type RemoveLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { base: BigNumber; quote: BigNumber; fee: BigNumber };
}

export interface IClearingHouseInterface extends utils.Interface {
  contractName: "IClearingHouse";
  functions: {
    "addLiquidity((address,uint256,uint256,int24,int24,uint256,uint256,bool,uint256))": FunctionFragment;
    "cancelAllExcessOrders(address,address)": FunctionFragment;
    "cancelExcessOrders(address,address,bytes32[])": FunctionFragment;
    "closePosition((address,uint160,uint256,uint256,bytes32))": FunctionFragment;
    "getAccountBalance()": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "getVault()": FunctionFragment;
    "liquidate(address,address,uint256)": FunctionFragment;
    "openPosition((address,bool,bool,uint256,uint256,uint256,uint160,bytes32))": FunctionFragment;
    "removeLiquidity((address,int24,int24,uint128,uint256,uint256,uint256))": FunctionFragment;
    "settleAllFunding(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [IClearingHouse.AddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllExcessOrders",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExcessOrders",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [IClearingHouse.ClosePositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [IClearingHouse.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [IClearingHouse.RemoveLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAllFunding",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAllFunding",
    data: BytesLike
  ): Result;

  events: {
    "FundingPaymentSettled(address,address,int256)": EventFragment;
    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)": EventFragment;
    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)": EventFragment;
    "PositionLiquidated(address,address,uint256,uint256,uint256,address)": EventFragment;
    "ReferredPositionChanged(bytes32)": EventFragment;
    "TrustedForwarderChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundingPaymentSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferredPositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
}

export type FundingPaymentSettledEvent = TypedEvent<
  [string, string, BigNumber],
  { trader: string; baseToken: string; fundingPayment: BigNumber }
>;

export type FundingPaymentSettledEventFilter = TypedEventFilter<FundingPaymentSettledEvent>;

export type LiquidityChangedEvent = TypedEvent<
  [
    string,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    maker: string;
    baseToken: string;
    quoteToken: string;
    lowerTick: number;
    upperTick: number;
    base: BigNumber;
    quote: BigNumber;
    liquidity: BigNumber;
    quoteFee: BigNumber;
  }
>;

export type LiquidityChangedEventFilter = TypedEventFilter<LiquidityChangedEvent>;

export type PositionChangedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    trader: string;
    baseToken: string;
    exchangedPositionSize: BigNumber;
    exchangedPositionNotional: BigNumber;
    fee: BigNumber;
    openNotional: BigNumber;
    realizedPnl: BigNumber;
    sqrtPriceAfterX96: BigNumber;
  }
>;

export type PositionChangedEventFilter = TypedEventFilter<PositionChangedEvent>;

export type PositionLiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  {
    trader: string;
    baseToken: string;
    positionNotional: BigNumber;
    positionSize: BigNumber;
    liquidationFee: BigNumber;
    liquidator: string;
  }
>;

export type PositionLiquidatedEventFilter = TypedEventFilter<PositionLiquidatedEvent>;

export type ReferredPositionChangedEvent = TypedEvent<
  [string],
  { referralCode: string }
>;

export type ReferredPositionChangedEventFilter = TypedEventFilter<ReferredPositionChangedEvent>;

export type TrustedForwarderChangedEvent = TypedEvent<
  [string],
  { forwarder: string }
>;

export type TrustedForwarderChangedEventFilter = TypedEventFilter<TrustedForwarderChangedEvent>;

export interface IClearingHouse extends BaseContract {
  contractName: "IClearingHouse";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getInsuranceFund(overrides?: CallOverrides): Promise<[string]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getQuoteToken(overrides?: CallOverrides): Promise<[string]>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAllFunding(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    params: IClearingHouse.AddLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAllExcessOrders(
    maker: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelExcessOrders(
    maker: string,
    baseToken: string,
    orderIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    params: IClearingHouse.ClosePositionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAccountValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "liquidate(address,address,uint256)"(
    trader: string,
    baseToken: string,
    oppositeAmountBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    params: IClearingHouse.OpenPositionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    params: IClearingHouse.RemoveLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAllFunding(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.AddLiquidityResponseStructOutput>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        base: BigNumber;
        quote: BigNumber;
        isPartialClose: boolean;
      }
    >;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.RemoveLiquidityResponseStructOutput>;

    settleAllFunding(trader: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FundingPaymentSettled(address,address,int256)"(
      trader?: string | null,
      baseToken?: string | null,
      fundingPayment?: null
    ): FundingPaymentSettledEventFilter;
    FundingPaymentSettled(
      trader?: string | null,
      baseToken?: string | null,
      fundingPayment?: null
    ): FundingPaymentSettledEventFilter;

    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)"(
      maker?: string | null,
      baseToken?: string | null,
      quoteToken?: string | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): LiquidityChangedEventFilter;
    LiquidityChanged(
      maker?: string | null,
      baseToken?: string | null,
      quoteToken?: string | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): LiquidityChangedEventFilter;

    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)"(
      trader?: string | null,
      baseToken?: string | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): PositionChangedEventFilter;
    PositionChanged(
      trader?: string | null,
      baseToken?: string | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): PositionChangedEventFilter;

    "PositionLiquidated(address,address,uint256,uint256,uint256,address)"(
      trader?: string | null,
      baseToken?: string | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      trader?: string | null,
      baseToken?: string | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): PositionLiquidatedEventFilter;

    "ReferredPositionChanged(bytes32)"(
      referralCode?: BytesLike | null
    ): ReferredPositionChangedEventFilter;
    ReferredPositionChanged(
      referralCode?: BytesLike | null
    ): ReferredPositionChangedEventFilter;

    "TrustedForwarderChanged(address)"(
      forwarder?: string | null
    ): TrustedForwarderChangedEventFilter;
    TrustedForwarderChanged(
      forwarder?: string | null
    ): TrustedForwarderChangedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAllFunding(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAllFunding(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
